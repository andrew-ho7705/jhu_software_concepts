"""
Pytest configuration and fixtures for TheGradCafe data analysis tests.
"""

import os
import pytest
import psycopg
import requests
from module_5.src.app.app import app as flask_app


@pytest.fixture
def app():  # pylint: disable=redefined-outer-name
    """
    Fixture for test app
    """
    flask_app.config.update({"TESTING": True})
    return flask_app


@pytest.fixture
def client(app):
    """
    Create a test client for the Flask application
    """
    return app.test_client()


@pytest.fixture
def example_applicant_data():
    """
    Provide sample applicant data for testing
    """
    return [
        {
            "program": "Civil And Environmental Engineering, Wayne State University",
            "comments": "professor took interview and then offer letter come",
            "date_added": "Added on September 06, 2025",
            "url": "https://www.thegradcafe.com/survey/result/986420",
            "status": "Accepted on 28 Aug",
            "term": "Spring 2026",
            "US/International": "International",
            "GRE": "310",
            "GRE_V": "150",
            "GPA": "3.62",
            "Degree": "PhD",
            "GRE_AW": "3.50",
        },
        {
            "program": "Accounting, University Of Maryland",
            "comments": "Money money money",
            "date_added": "Added on February 2, 2022",
            "url": "https://www.thegradcafe.com/survey/result/234567",
            "status": "Accepted on 18 Jan",
            "term": "Fall 2022",
            "US/International": "International",
            "GPA": "3.85",
            "Degree": "PhD",
        },
        {
            "program": "Nursing, Towson University",
            "comments": "I am nurse",
            "date_added": "Added on March 3, 2023",
            "url": "https://www.thegradcafe.com/survey/result/345678",
            "status": "Rejected on 31 Jan",
            "term": "Fall 2023",
            "US/International": "American",
            "GPA": "3.17",
            "Degree": "Other",
        },
    ]


@pytest.fixture
def example_duplicate_applicant_data():
    """
    Provide sample duplicate applicant data for testing idempotency
    """
    return [
        {
            "program": "Computer Science, Johns Hopkins University",
            "comments": "Masters in Comupter Science at JHU",
            "date_added": "Added on January 1, 2021",
            "url": "https://www.thegradcafe.com/survey/result/123456",
            "status": "Accepted on 20 Dec",
            "term": "Fall 2021",
            "US/International": "American",
            "GPA": "3.13",
            "Degree": "Masters",
        },
        {
            "program": "Computer Science, Johns Hopkins University",
            "comments": "Masters in Comupter Science at JHU",
            "date_added": "Added on January 1, 2021",
            "url": "https://www.thegradcafe.com/survey/result/123456",
            "status": "Accepted on 20 Dec",
            "term": "Fall 2021",
            "US/International": "American",
            "GPA": "3.13",
            "Degree": "Masters",
        },
    ]


@pytest.fixture
def fake_results():
    """
    Provide fake analysis results for testing
    """
    return {
        "q1": 6640,
        "q2": 60.60,
        "q3a": 3.79,
        "q3b": 177.39,
        "q3c": 159.67,
        "q3d": 6.35,
        "q4": 3.77,
        "q5": 35.94,
        "q6": 3.76,
        "q7": 13,
        "q8": 0,
        "q9": [],
        "q10": [],
    }


@pytest.fixture
def connect_to_db():
    """
    Create a database connection for testing
    """
    with psycopg.connect(os.environ.get("DATABASE_URL")) as conn:
        with conn.cursor() as cur:
            cur.execute(
                """
                CREATE TABLE test (
                    p_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    program TEXT,
                    comments TEXT,
                    date_added DATE,
                    url TEXT UNIQUE,
                    status TEXT,
                    term TEXT,
                    us_or_international TEXT,
                    gpa FLOAT,
                    gre FLOAT,
                    gre_v FLOAT,
                    gre_aw FLOAT,
                    degree TEXT,
                    llm_generated_program TEXT,
                    llm_generated_university TEXT
                );
                """
            )
            conn.commit()
            yield conn, cur

            cur.execute("DROP TABLE IF EXISTS test")
            conn.commit()


class FakeLLMResponse:
    """
    Mock LLM response for testing
    """

    def __init__(self, json_data=None):
        """
        Initialize with mock JSON data
        """
        self._json_data = json_data or []

    def json(self):
        """
        Return mock JSON response
        """
        # Mimic the structure your pull_data function expects
        return {
            "rows": [
                {
                    "llm-generated-program": entry.get("program", "Mock Program"),
                    "llm-generated-university": "Mock University",
                }
                for entry in self._json_data
            ]
        }

    def raise_for_status(self):
        """
        Mock method that does nothing
        """


@pytest.fixture
def mock_llm(monkeypatch):
    """
    Mock LLM service for testing
    """

    def fake_post(_url, json=None):
        """
        Fake POST request to LLM service
        """
        return FakeLLMResponse(json)

    monkeypatch.setattr(requests, "post", fake_post)
    return fake_post
