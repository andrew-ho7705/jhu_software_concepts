Testing Guide
=============

This guide describes the testing utilities, fixtures, markers, and selectors used for this project.

Fixtures
--------

The following pytest fixtures are provided to facilitate testing of the Flask app, ETL, and database layers.

**Flask App & Client**

.. code-block:: python

    @pytest.fixture
    def app():
        """
        Provides a Flask app instance configured for testing.
        """
        flask_app.config.update({"TESTING": True})
        return flask_app

    @pytest.fixture
    def client(app):
        """
        Provides a test client for the Flask app.
        """
        return app.test_client()

**Mock Applicant Data**

.. code-block:: python

    @pytest.fixture
    def example_applicant_data():
        """
        Returns a list of sample applicant dictionaries for testing ETL and database insertion.
        """
        # three different applicant records
        ...

    @pytest.fixture
    def example_duplicate_applicant_data():
        """
        Returns two identical applicant records to test idempotency logic.
        """
        ...

**Database Fixture**

.. code-block:: python

    @pytest.fixture
    def connect_to_db():
        """
        Provides a connection and cursor to a test PostgreSQL database.
        Creates a temporary 'test' table before the test and drops it after.
        Uses the DATABASE_URL environment variable for connection.
        """
        conn = psycopg2.connect(os.environ.get("DATABASE_URL"))
        cur = conn.cursor()
        cur.execute("""
            CREATE TABLE test (
                p_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                program TEXT,
                comments TEXT,
                date_added DATE,
                url TEXT UNIQUE,
                status TEXT,
                term TEXT,
                us_or_international TEXT,
                gpa FLOAT,
                gre FLOAT,
                gre_v FLOAT,
                gre_aw FLOAT,
                degree TEXT,
                llm_generated_program TEXT,
                llm_generated_university TEXT
            );
        """)
        conn.commit()
        yield conn, cur
        cur.execute("DROP TABLE IF EXISTS test")
        conn.commit()
        cur.close()
        conn.close()

Marked Tests
------------

The project uses custom pytest markers to organize tests:

- **@pytest.mark.web** : marks tests that require the Flask web client.  
- **@pytest.mark.buttons** : marks tests that interact with the two buttons on the app.
- **@pytest.mark.analysis** : marks tests that call functions that format data diaplyed.
- **@pytest.mark.db** : marks tests that require database access.
- **@pytest.mark.web** : marks tests that test end-to-end functionality.

Selectors
---------

Certain tests rely on expected HTML content or elements (“selectors”) to validate the rendered page.

Common selectors:

- **"Pull Data"** button on the home page  
- **"Update Analysis"** button on the home page  
- Presence of **"Analysis"** text  
- Presence of at least one **"Answer:"** text  
- Columns in database table: program, comments, date_added, url, status, term, llm_generated_program, llm_generated_university

Tests validate that these elements exist in the HTML response or the database after actions like `/pull_data` or `/update_analysis`.
